#include <stdio.h>
#include <stdlib.h>
#define MAX 100
int size = 0;
int tree[MAX];

void init()
{ // initilization
    for (int i = 0; i < MAX; i++)
        tree[i] = -1;
}

void insert(int root, int value){
    if(root == MAX)
        printf("Tree is full!!!\n");

    if(tree[root] == -1)
        tree[root] = value;
    else if(value < tree[root])
        insert(2 * root + 1, value);
    else if(value > tree[root])
        insert(2 * root + 2, value);
    
}

void preorder(int root)
{
    if (tree[root] == -1)
        return;
    printf("%d ", tree[root]);
    preorder(2 * root + 1);
    preorder(2 * root + 2);
}

void inorder(int root){
    if(tree[root] == -1)
        return;
    inorder(2 * root + 1);
    printf("%d ", tree[root]);
    inorder(2 * root + 2);
}

void postorder(int root){
    if(tree[root] == -1)
        return;
    postorder(2 * root + 1);
    postorder(2 * root + 2);
    printf("%d ", tree[root]);
}

int search(int target){
    int i = 0;
    while(i < MAX && tree[i] != -1){
        if(tree[i] == target)
            return i;
        else if(target < tree[i])
            i = 2 * i + 1;
        else    
            i = 2 * i + 1;
    } 
    return -1;
}
int findMin(int i){
   while(i*2+1<MAX && tree[i*2+1] ){
       i=2*i+1;
   }
   return i;
}
int findMax(int i){
    while(i*2+2<MAX && tree[i*2+2]){
        i=2*i+2;
    }
    return i;
}
void delete(int i,int value){
     i = search(value);
    if(i == -1)
        printf("Element not found!!!\n");  
    else{
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        if((left >= MAX || tree[left] == -1) && (right >= MAX) || tree[right] == -1 )
            tree[i] = -1;
       else if(left>=MAX ||tree[left]==-1){
          int min=findMin(right);
           tree[i]=tree[min];
           delete(2*i+1,tree[min]);
       }
         else if(right>=MAX ||tree[right]==-1){
            int max=findMax(left);
         tree[i]=tree[max];
         delete(max,tree[max]);
         }
        else{
            int min=findMin(right);
            tree[i]=tree[min];
            delete(min,tree[min]);
        }
    }
}
int main()
{

    int n, value, index;
    init();
    while(1){
        printf("1. Insert\n");
        printf("2. Preorder\n");
        printf("3. Postorder\n");
        printf("4. Inorder\n");
        printf("5. Search\n");
        printf("6. Delete\n");
        printf("7. Exit\n");
        int choice;
        printf("Enter Choice: ");
        scanf("%d", &choice);
        switch(choice){
            case 1:
                printf("Enter the value of n: ");
                scanf("%d", &n);
                insert(0, n);
                break;
            case 2:
                preorder(0);
                printf("\n");
                break;
            case 3:
                postorder(0);
                printf("\n");
                break;
            case 4:
                inorder(0);
                printf("\n");
                break;
            case 5:
                printf("Enter the value: ");
                scanf("%d", &value);
                index = search(value);
                if(index != -1)
                    printf("Found!!!\n");
                else 
                    printf("Not Found!!!\n");
                break;
            case 6:
                 printf("Enter element to delete: ");
                 scanf("%d", &value);
                 delete(value, 0);
                 break;
            case 7:
                exit(0);
                break;
            default:
                printf("Invalid Choice!!\n");
            
        }
    }
 
    return 0;
}
