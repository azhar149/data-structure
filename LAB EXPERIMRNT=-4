#include<stdio.h>
#include<string.h>
#include<ctype.h>
#include<math.h>
int operand[100];
int operator[100];
int top1=-1,top2=-1;

// precedence checking
int precedence(char opr){
    switch(opr){
        case '+':
        case '-':
            return 1;
        case '*':
        case '/':
            return 2;
        case '^':
            return 3;
        default :
            return 0;            
    }
}
// Do process
void doProcess(){
    int x = operand[top1--];
    int y = operand[top1--];
    char opr = operator[top2--];
    int z;
    switch(opr){
        case '-':
        z = y - x;
            break;
        case '+':
        z = y + x;
            break;
        case '*':
        z = y * x;
            break;
        case '/': 
        z = y / x;
            break;
        case '^':
        z = pow(y,x);
            break;           
    }
    operand[++top1] = z;
}

// This is infix 
int evalinfixexpression(char *exp){
    int size=strlen(exp);
    for(int i=0;i<size;i++){
        char ch=exp[i];
        if(isdigit(ch)){
            int num=0;
            while(isdigit(exp[i])){
                num=num*10+exp[i]-48;
                i++;
            }
            i--;
            operand[++top1]=num;
        }
        else if(ch=='+'||ch=='-'||ch=='*'||ch=='/'||ch=='^'){
            if(top2 == -1)
               operator[++top2]=ch;
            else{
                while(top2!= -1 && precedence(ch)<=precedence(operator[top2])){
                    doProcess();
                  }
                  operator[++top2]=ch;
               }
            }
            else if(ch=='('){
                operator[++top2]='(';
            }
            else if(ch==')'){
                while(operator[top2]!='('){
                    doProcess();
                }
                top2--;
            }
        }
        while(top2!= -1){
            doProcess();
        }
        return operand[top1--];
    }

// prefix expression 
int evalPrefixexpression(char *exp){
int size = strlen(exp);
for (int i=size-1 ; i>=0 ; i--){
    char ch = exp[i];
    if(isdigit(ch)){
        int num=0 , place = 1;
        while(isdigit(exp[i])){
            num = num + (exp[i]-'0') * place ;
            i--;
            place = place * 10 ;
        }
        i++;
        operand[++top1]=num;
    }
    else if (ch=='+'||ch=='-'||ch=='*'||ch=='/'||ch=='^'){
        int x = operand[top1--];
        int y = operand[top1--];
        int z ;
        switch(ch){
            case '+':
            z = y + x ;
            break;
            case '-':
            z = y - x ;
            break;
            case '*':
            z = y * x ;
            break;
            case '/':
            z = y / x ;
            break;
            case '^':
            z = pow(y,x) ;
            break;
        }
        operand[++top1]=z;
    }
}
return operand[top1--];
}
// postfix expression 
int evalPostfixexpression(char *exp){
    int size = strlen(exp);
    for (int i=0 ; i<size ; i++){
        char ch = exp[i];
        if(isdigit(ch)){
            int num=0;
            while(isdigit(exp[i])){
                num = num * 10 + exp[i] - '0';
                i++;
            }
            i--;
            operand[++top1]=num;
        }
        else if (ch=='+'||ch=='-'||ch=='*'||ch=='/'||ch=='^'){
            int x = operand[top1--];
            int y = operand[top1--];
            int z ;
            switch(ch){
                case '+':
                z = y + x ;
                break;
                case '-':
                z = y - x ;
                break;
                case '*':
                z = y * x ;
                break;
                case '/':
                z = y / x ;
                break;
                case '^':
                z = pow(y,x) ;
                break;
            }
            operand[++top1]=z;
        }
    }
    return operand[top1--];
    }
// This is main function
    int main(){
        char str[100];
        int result;
        printf("Enter Infix Expression : ");
        gets(str);
        result = evalinfixexpression(str);
        printf("Result = %d\n",result);

       printf("Enter Postfix Expression : ");
        gets(str);
         result = evalPostfixexpression(str);
        printf("Result = %d\n",result);

        printf("Enter prefix Expression : ");
        gets(str);
        result = evalPrefixexpression(str);
        printf("Result = %d\n",result);

        return 0; 
    }
